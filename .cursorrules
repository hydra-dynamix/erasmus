{
  "architecture": "# Context Watcher: Automated Development Environment Setup and Management\n\n## Overview\n\nA single-file context watcher for cursor and windsurf, designed to streamline project initialization, development tracking, and version management.\n\n## Directory Structure\n\n- \ud83d\udcc1 **/**\n  - \ud83d\udcc4 **README.md**\n  - \ud83d\udcc4 **architecture.md**\n  - \ud83d\udcc1 **docs/**\n    - \ud83d\udcc4 **API_REFERENCE.md**\n    - \ud83d\udcc4 **INTEGRATION_GUIDE.md**\n    - \ud83d\udcc1 **api/**\n      - \ud83d\udcc4 **core.md**\n    - \ud83d\udcc1 **examples/**\n      - \ud83d\udcc1 **game_sync/**\n        - \ud83d\udcc4 **ARCHITECTURE.md**\n    - \ud83d\udcc1 **guides/**\n      - \ud83d\udcc4 **integration.md**\n  - \ud83d\udcc1 **erasmus/**\n    - \ud83d\udcc4 ****init**.py**\n    - \ud83d\udcc4 ****main**.py**\n    - \ud83d\udcc1 **cli/**\n      - \ud83d\udcc4 ****init**.py**\n      - \ud83d\udcc4 **commands.py**\n      - \ud83d\udcc4 **main.py**\n      - \ud83d\udcc4 **protocol.py**\n      - \ud83d\udcc4 **setup.py**\n    - \ud83d\udcc1 **core/**\n      - \ud83d\udcc4 ****init**.py**\n      - \ud83d\udcc4 **context.py**\n      - \ud83d\udcc4 **dynamic_updates.py**\n      - \ud83d\udcc4 **ide_integration.py**\n      - \ud83d\udcc4 **rule_applicator.py**\n      - \ud83d\udcc4 **rules.py**\n      - \ud83d\udcc4 **rules_parser.py**\n      - \ud83d\udcc4 **task.py**\n      - \ud83d\udcc4 **watcher.py**\n    - \ud83d\udcc4 **erasmus.py**\n    - \ud83d\udcc1 **git/**\n      - \ud83d\udcc4 ****init**.py**\n      - \ud83d\udcc4 **manager.py**\n    - \ud83d\udcc1 **ide/**\n      - \ud83d\udcc4 ****init**.py**\n      - \ud83d\udcc4 **cursor_integration.py**\n      - \ud83d\udcc4 **sync_integration.py**\n    - \ud83d\udcc1 **sync/**\n      - \ud83d\udcc4 ****init**.py**\n      - \ud83d\udcc4 **file_sync.py**\n    - \ud83d\udcc1 **utils/**\n      - \ud83d\udcc4 ****init**.py**\n      - \ud83d\udcc4 **context.py**\n      - \ud83d\udcc4 **env.py**\n      - \ud83d\udcc4 **env_manager.py**\n      - \ud83d\udcc4 **file.py**\n      - \ud83d\udcc4 **file_ops.py**\n      - \ud83d\udcc4 **logging.py**\n      - \ud83d\udcc4 **path_constants.py**\n      - \ud83d\udcc4 **paths.py**\n      - \ud83d\udcc1 **protocols/**\n        - \ud83d\udcc4 ****init**.py**\n        - \ud83d\udcc4 **agent_registry.json**\n        - \ud83d\udcc4 **base.py**\n        - \ud83d\udcc4 **cli.py**\n        - \ud83d\udcc4 **context.py**\n        - \ud83d\udcc4 **example.py**\n        - \ud83d\udcc4 **integration.py**\n        - \ud83d\udcc4 **manager.py**\n        - \ud83d\udcc4 **protocol_cli.py**\n        - \ud83d\udcc4 **server.py**\n        - \ud83d\udcc1 **stored/**\n          - \ud83d\udcc4 **CI_CD Agent.md**\n          - \ud83d\udcc4 **Code Review Agent.md**\n          - \ud83d\udcc4 **Debug Agent.md**\n          - \ud83d\udcc4 **Dependency Agent.md**\n          - \ud83d\udcc4 **Developer Agent.md**\n          - \ud83d\udcc4 **Documentation Agent.md**\n          - \ud83d\udcc4 **Orchestration Agent.md**\n          - \ud83d\udcc4 **Performance Agent.md**\n          - \ud83d\udcc4 **Product Owner Agent.json**\n          - \ud83d\udcc4 **Product Owner Agent.md**\n          - \ud83d\udcc4 **Security Agent.md**\n          - \ud83d\udcc4 **Style Agent.md**\n          - \ud83d\udcc4 **Testing Agent.md**\n          - \ud83d\udcc4 **agent_workflow.md**\n          - \ud83d\udcc4 **cidc.md**\n          - \ud83d\udcc4 **code_review.md**\n          - \ud83d\udcc4 **debugging.md**\n          - \ud83d\udcc4 **dependency.md**\n          - \ud83d\udcc4 **developer.md**\n          - \ud83d\udcc4 **documentation.md**\n          - \ud83d\udcc4 **orchestration.md**\n          - \ud83d\udcc4 **performance.md**\n          - \ud83d\udcc4 **product_owner.md**\n          - \ud83d\udcc4 **security.md**\n          - \ud83d\udcc4 **style.md**\n          - \ud83d\udcc4 **testing.md**\n      - \ud83d\udcc4 **protocols.py**\n  - \ud83d\udcc4 **erasmus.py**\n  - \ud83d\udcc4 **progress.md**\n  - \ud83d\udcc1 **public/**\n    - \ud83d\udcc4 **flowchart.png**\n  - \ud83d\udcc4 **pyproject.toml**\n  - \ud83d\udcc1 **scripts/**\n    - \ud83d\udcc4 **cleanup.sh**\n    - \ud83d\udcc4 **setup_gamesync_demo.sh**\n    - \ud83d\udcc1 **test/**\n      - \ud83d\udcc4 **test_installer.sh**\n  - \ud83d\udcc1 **src/**\n    - \ud83d\udcc4 **collector.py**\n    - \ud83d\udcc4 **stdlib.py**\n  - \ud83d\udcc4 **tasks.md**\n  - \ud83d\udcc1 **templates/**\n    - \ud83d\udcc4 **architecture.md**\n    - \ud83d\udcc4 **progress.md**\n    - \ud83d\udcc4 **tasks.md**\n  - \ud83d\udcc1 **tests/**\n    - \ud83d\udcc4 ****init**.py**\n    - \ud83d\udcc1 **benchmarks/**\n      - \ud83d\udcc4 ****init**.py**\n      - \ud83d\udcc4 **test_memory_usage.py**\n      - \ud83d\udcc4 **test_sync_performance.py**\n    - \ud83d\udcc1 **cli/**\n      - \ud83d\udcc4 ****init**.py**\n      - \ud83d\udcc4 **test_setup.py**\n    - \ud83d\udcc4 **conftest.py**\n    - \ud83d\udcc1 **core/**\n      - \ud83d\udcc4 ****init**.py**\n      - \ud83d\udcc4 **test_context.py**\n      - \ud83d\udcc4 **test_dynamic_updates.py**\n      - \ud83d\udcc4 **test_rule_applicator.py**\n      - \ud83d\udcc4 **test_rules.py**\n      - \ud83d\udcc4 **test_rules_parser.py**\n      - \ud83d\udcc4 **test_task.py**\n      - \ud83d\udcc4 **test_watcher.py**\n      - \ud83d\udcc4 **test_watcher_integration.py**\n    - \ud83d\udcc1 **git/**\n      - \ud83d\udcc4 ****init**.py**\n    - \ud83d\udcc1 **ide/**\n      - \ud83d\udcc4 **test_cursor_integration.py**\n      - \ud83d\udcc4 **test_sync_integration.py**\n    - \ud83d\udcc1 **packager/**\n      - \ud83d\udcc4 **test_collector.py**\n      - \ud83d\udcc4 **test_stdlib.py**\n    - \ud83d\udcc1 **sync/**\n      - \ud83d\udcc4 **test_file_sync.py**\n    - \ud83d\udcc4 **test_file_sync.py**\n    - \ud83d\udcc4 **test_git_commits.py**\n    - \ud83d\udcc4 **test_git_manager.py**\n    - \ud83d\udcc4 **test_utils.py**\n    - \ud83d\udcc1 **utils/**\n      - \ud83d\udcc4 ****init**.py**\n  - \ud83d\udcc4 **uv.lock**\n  - \ud83d\udcc4 **version.json**\n  - \ud83d\udcc4 **walk.py**\n\n## Key Components\n\n- `watcher.py`: Main application orchestrating project setup and management\n- `src/git_manager.py`: Atomic commit git management system\n- `.cursorrules` and `.windsurfrules`: Context injection files for respective IDEs\n\n## Technology Stack\n\n### Prerequisites\n\n- **Windows**\n  - winget (Microsoft App Installer)\n  - Python 3.8+\n- **macOS**\n  - Homebrew\n  - Python 3.8+\n- **Linux**\n  - curl\n  - Python 3.8+\n\n### Package Management\n\n- **Python: `uv` package manager**\n\n  - Windows: Installed via winget\n  - macOS: Installed via Homebrew\n  - Linux: Installed via curl script\n  - Dependency management directly in `watcher.py`\n  - Single-script dependency tracking\n\n- **Development Tools**\n  - Logging: Rich logging with clear terminal output\n  - File Watching: `watchdog` for monitoring context files\n  - AI Integration: Local OpenAI client for commit message generation\n\n## Workflow Stages\n\n### 1. Project Initialization\n\n- Create essential project files and directories:\n  - `.erasmus/architecture.md`: Project architecture documentation\n  - `progress.md`: Development progress tracking\n  - `tasks.md`: Granular task management\n  - `.IDErules`: Bundled context for IDE integration\n  - `global_rules.md`: Global development guidelines\n  - `context_watcher.log`: Comprehensive project logs\n\n### 2. Environment Setup\n\n- Virtual Environment Configuration\n\n  - Python:\n    - `uv` as package manager\n    - `pytest` for comprehensive testing\n  - Node:\n    - `pnpm` as package manager\n    - `jest` for testing\n    - `puppeteer` for E2E testing\n  - Rust:\n    - `cargo` as package manager\n    - Native Rust testing framework\n    - `mockito` for mocking\n\n- Environment Variable Management\n  - Generate `.env.example`\n  - Create `.env` with placeholder values\n\n### 3. Development Workflow\n\n- Automated Development Cycle:\n  1. Generate tests for current task\n  2. Implement task code\n  3. Run and validate tests\n  4. Iterative error correction\n  5. Update task and progress status\n  6. Proceed to next component\n\n### 4. Packaging and Distribution\n\n- Single File Installer Requirements\n  - All dependencies recorded via `uv`\n  - Initialization via `uv run watcher.py --setup IDE_ENVIRONMENT`\n  - Cross-platform installation scripts\n    - `.sh` for Unix-like systems\n    - `.bat` for Windows\n\n### 5. Version Control and Validation\n\n- Repository: https://github.com/bakobiibizo/erasmus\n- Versioning system with cryptographic hash validation\n- Separate build and release directories\n\n## IDE Compatibility\n\n- cursor: `.cursorrules` context injection\n- windsurf: `.windsurfrules` context injection\n- Global rules configurable in respective IDE settings\n\n## Project Goal\n\nConsolidate git management into a single, portable `watcher.py` that simplifies project setup and management across different development environments.\n\n## Future Considerations\n\n- Expand IDE compatibility\n- Enhance AI-driven development workflows\n- Improve cross-platform support\n",
  "progress": "# Project Development Progress\n\n## Development Stages\n\n### 1. Project Initialization [COMPLETED]\n\n- [x] Define project architecture\n- [x] Create initial project structure\n- [x] Set up version control\n- [x] Configure package management\n\n### 2. Core Functionality Development [COMPLETED]\n\n- [x] Implement watcher.py core logic\n- [x] Develop git management system\n- [x] Create context injection mechanisms\n- [x] Implement IDE-specific integrations\n\n### 3. Environment Setup [COMPLETED]\n\n- [x] Develop cross-platform installation scripts\n- [x] Create virtual environment configuration\n- [x] Implement dependency management\n- [x] Set up testing frameworks\n\n### 4. AI Integration [COMPLETED]\n\n- [x] Implement local OpenAI client\n- [x] Develop commit message generation\n- [x] Create context tracking system\n\n### 5. Testing and Validation [IN PROGRESS]\n\n- [x] Develop comprehensive test suites\n- [x] Implement cross-platform testing\n- [x] Create validation mechanisms\n- [x] Set up Docker testing environment\n- [ ] Perform thorough code review\n\n### 6. Packaging and Distribution [IN PROGRESS]\n\n- [x] Set up `uv` as primary package manager\n- [x] Create cross-platform installation documentation\n- [x] Develop universal installation script\n- [x] Move release directory to root level\n- [ ] Test installation process on multiple platforms\n- [ ] Define versioning strategy\n- [ ] Prepare initial release notes\n- [ ] Set up basic release workflow\n\n### 7. Documentation [IN PROGRESS]\n\n- [ ] Create inline code documentation\n- [ ] Develop API reference documentation\n- [ ] Complete user guide documentation\n- [ ] Document build and release processes\n- [ ] Create developer contribution guide\n- [ ] Document system architecture and workflows\n\n### 8. Final Refinement [IN PROGRESS]\n\n- [ ] Performance optimization\n- [ ] Security audit\n- [x] Cross-platform compatibility testing\n- [ ] Analyze and improve resource management\n- [ ] Review subprocess call efficiency\n\n## Project Progress\n\n### Completed Milestones\n\n- [x] Core watcher functionality implementation\n- [x] Git management integration\n- [x] Testing framework setup\n- [x] Cross-platform compatibility improvements\n- [x] Docker testing environment setup\n- [x] Release directory restructuring\n\n### Recent Developments\n\n- [x] Integrated GitManager directly into watcher.py\n- [x] Removed separate git_manager.py\n- [x] Resolved Windows character encoding issues\n- [x] Enhanced atomic commit functionality\n- [x] Moved release directory to project root\n- [x] Standardized on docker compose command\n- [x] Improved git-related function documentation\n  - [x] Enhanced `determine_commit_type` docstring\n  - [x] Enhanced `extract_commit_message` docstring\n  - [x] Enhanced `make_atomic_commit` docstring\n  - [x] Enhanced `check_creds` docstring\n- [x] Improved task management documentation\n  - [x] Enhanced `manage_task` function documentation\n  - [x] Verified Task and TaskManager class documentation\n- [x] Improved file watching system documentation\n  - [x] Enhanced `BaseWatcher` class documentation\n  - [x] Enhanced `MarkdownWatcher` class documentation\n  - [x] Enhanced `ScriptWatcher` class documentation\n  - [x] Enhanced `run_observer` function documentation\n  - [x] Enhanced `update_specific_file` function documentation\n\n## Current Focus\n\n- Create comprehensive documentation\n- Create inline code documentation throughout codebase\n- Develop API reference documentation\n- Update user guide and installation instructions\n- Document build and release workflow\n\n## Next Milestones\n\n1. Complete comprehensive code documentation\n2. Finish user guide documentation\n3. Complete release directory restructuring\n4. Test build process with new paths\n\n## Technical Debt\n\n- Ensure robust error handling\n- Optimize subprocess calls\n- Review logging and error reporting\n- Improve context tracking efficiency\n- Update documentation for new directory structure\n\n## Progress Tracking\n\n- Total tasks: 34\n- Completed: 26\n- In Progress: 3\n- Pending: 5\n- Progress: 76%\n",
  "tasks": "# Development Tasks\n\n## Completed Component: `stdlib.py`\n\nThe `stdlib.py` module is responsible for detecting standard library modules to filter them from the dependencies that need to be installed.\n\n### Tasks\n\n#### 1. Research Standard Library Detection Methods\n\n- [x] Research methods to detect Python standard library modules\n- [x] Evaluate using `sys.stdlib_module_names` (Python 3.10+)\n- [x] Evaluate using external packages like `stdlib-list`\n- [x] Determine the most reliable cross-version approach\n\n#### 2. Implement Core Detection Function\n\n- [x] Implement `is_stdlib_module(name: str) -> bool` function\n- [x] Handle edge cases (e.g., submodules like `os.path`)\n- [x] Ensure compatibility with different Python versions\n\n#### 3. Create Module-Level Cache\n\n- [x] Implement caching mechanism for standard library modules\n- [x] Ensure thread safety if necessary\n- [x] Add initialization function to populate cache on module load\n\n#### 4. Add Utility Functions\n\n- [x] Implement `filter_stdlib_imports(imports: set[str]) -> set[str]` to filter a set of imports\n- [x] Add helper functions for common operations\n\n#### 5. Write Tests\n\n- [x] Write unit tests for `is_stdlib_module`\n- [x] Test with various standard library modules\n- [x] Test with third-party modules\n- [x] Test edge cases and submodules\n\n#### 6. Documentation\n\n- [x] Add module-level docstring\n- [x] Document all functions with type hints\n- [x] Add usage examples\n- [x] Document limitations and edge cases\n\n## Completed Component: `collector.py`\n\nThe `collector.py` module is responsible for recursively finding Python files in a project directory.\n\n### Tasks\n\n#### 1. Design File Collection Strategy\n\n- [x] Determine approach for recursive directory traversal\n- [x] Decide on handling of symlinks and special files\n- [x] Plan for exclusion patterns (e.g., `.git`, `__pycache__`, etc.)\n\n#### 2. Implement Core Collection Function\n\n- [x] Implement `collect_py_files(base_path: str) -> list[str]` function\n- [x] Add proper error handling for file system operations\n- [x] Ensure cross-platform compatibility (Windows/Unix paths)\n\n#### 3. Add Filtering Capabilities\n\n- [x] Implement exclusion patterns for directories\n- [x] Add support for custom file extensions beyond `.py`\n- [x] Create utility for filtering collected files\n\n#### 4. Optimize Performance\n\n- [x] Implement efficient traversal algorithm\n- [x] Add caching if necessary for large projects\n- [x] Consider parallel processing for large directories\n\n#### 5. Write Tests\n\n- [x] Write unit tests for file collection\n- [x] Test with various directory structures\n- [x] Test exclusion patterns\n- [x] Test edge cases (empty directories, permission issues)\n\n#### 6. Documentation\n\n- [x] Add module-level docstring\n- [x] Document all functions with type hints\n- [x] Add usage examples\n- [x] Document limitations and edge cases\n\n## Current Component: `parser.py`\n\nThe `parser.py` module is responsible for parsing Python imports using AST and stripping import statements from code.\n\n### Tasks\n\n#### 1. Design Import Parsing Strategy\n\n- [ ] Research AST module for parsing Python code\n- [ ] Determine approach for identifying import statements\n- [ ] Plan for handling different import formats (`import x`, `from x import y`, etc.)\n\n#### 2. Implement Import Extraction\n\n- [ ] Implement `extract_imports(source: str) -> set[str]` function\n- [ ] Handle regular imports (`import x`)\n- [ ] Handle from imports (`from x import y`)\n- [ ] Handle relative imports (`from . import x`)\n\n#### 3. Implement Code Stripping\n\n- [ ] Implement `strip_imports(source: str) -> str` function\n- [ ] Preserve line numbers for debugging\n- [ ] Handle multi-line imports\n- [ ] Preserve docstrings and comments\n\n#### 4. Add Utility Functions\n\n- [ ] Create function to parse imports from a file\n- [ ] Add support for parsing multiple files\n- [ ] Implement import normalization\n\n#### 5. Write Tests\n\n- [ ] Write unit tests for import extraction\n- [ ] Test with various import formats\n- [ ] Test code stripping functionality\n- [ ] Test edge cases (comments, docstrings, etc.)\n\n#### 6. Documentation\n\n- [ ] Add module-level docstring\n- [ ] Document all functions with type hints\n- [ ] Add usage examples\n- [ ] Document limitations and edge cases\n\n## Next Steps\n\nAfter completing `collector.py`, we will move on to implementing `parser.py` which will parse imports using AST and strip import statements from Python files.\n",
  "protocols": [
    "Style Agent",
    "Developer Agent",
    "Orchestration Agent"
  ],
  "protocol_markdown": "# Style Agent\n\n## Role\ncode_style_verification\n\n## Triggers\ncode_implementation, code_changes\n\n## Produces\nstyle_reports, linting_fixes\n\n## Consumes\nimplementation_code\n\n## Description\nThis is a protocol for the Style Agent role.\n",
  "current_protocol": "Style Agent",
  "protocol_role": "code_style_verification",
  "protocol_triggers": [
    "code_implementation",
    "code_changes"
  ],
  "protocol_produces": [
    "style_reports",
    "linting_fixes"
  ],
  "protocol_consumes": [
    "implementation_code"
  ]
}