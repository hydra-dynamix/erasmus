{
  "architecture": "# Project-Python Script Packager with Cross-Platform `uv` Bootstrap\n\n## Overview\n\nThis tool is a **Python script bundler** that packages a project into a **single, standalone executable script**. It recursively gathers `.py` files, merges them into one file, collects all `import` statements, and **bootstraps runtime dependencies using [uv](https://github.com/astral-sh/uv)**.\n\nThe final output is a **platform-aware, cross-compatible script** that:\n\n- Works on **Linux, macOS, and Windows**\n- **Installs `uv` automatically** if missing\n- Infers and installs required packages using `uv add`\n- Runs itself using `uv run`\n- Requires **no virtual environments, no `requirements.txt`, and no pip**\n\n---\n\n## Directory Structure\n\n```\n./\n\u251c\u2500\u2500 docs/\n\u2502   \u251c\u2500\u2500 API_REFERENCE.md\n\u2502   \u251c\u2500\u2500 INTEGRATION_GUIDE.md\n\u2502   \u251c\u2500\u2500 api/\n\u2502   \u2502   \u2514\u2500\u2500 core.md\n\u2502   \u251c\u2500\u2500 examples/\n\u2502   \u2502   \u2514\u2500\u2500 game_sync/\n\u2502   \u2502       \u2514\u2500\u2500 .architecture.md\n\u2502   \u2514\u2500\u2500 guides/\n\u2502       \u2514\u2500\u2500 integration.md\n\u251c\u2500\u2500 erasmus/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 __main__.py\n\u2502   \u251c\u2500\u2500 cli/\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u251c\u2500\u2500 commands.py\n\u2502   \u2502   \u251c\u2500\u2500 main.py\n\u2502   \u2502   \u251c\u2500\u2500 protocol.py\n\u2502   \u2502   \u2514\u2500\u2500 setup.py\n\u2502   \u251c\u2500\u2500 core/\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u251c\u2500\u2500 context.py\n\u2502   \u2502   \u251c\u2500\u2500 dynamic_updates.py\n\u2502   \u2502   \u251c\u2500\u2500 ide_integration.py\n\u2502   \u2502   \u251c\u2500\u2500 rule_applicator.py\n\u2502   \u2502   \u251c\u2500\u2500 rules.py\n\u2502   \u2502   \u251c\u2500\u2500 rules_parser.py\n\u2502   \u2502   \u251c\u2500\u2500 task.py\n\u2502   \u2502   \u2514\u2500\u2500 watcher.py\n\u2502   \u251c\u2500\u2500 erasmus.py\n\u2502   \u251c\u2500\u2500 git/\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u2514\u2500\u2500 manager.py\n\u2502   \u251c\u2500\u2500 ide/\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u251c\u2500\u2500 cursor_integration.py\n\u2502   \u2502   \u2514\u2500\u2500 sync_integration.py\n\u2502   \u2514\u2500\u2500 sync/\n\u2502       \u251c\u2500\u2500 __init__.py\n\u2502       \u2514\u2500\u2500 file_sync.py\n\u251c\u2500\u2500 scripts/\n\u2502   \u251c\u2500\u2500 cleanup.sh\n\u2502   \u251c\u2500\u2500 setup_gamesync_demo.sh\n\u2502   \u2514\u2500\u2500 test/\n\u2502       \u2514\u2500\u2500 test_installer.sh\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 collector.py\n\u2502   \u2514\u2500\u2500 stdlib.py\n\u251c\u2500\u2500 templates/\n\u2502   \u251c\u2500\u2500 .architecture.md\n\u2502   \u251c\u2500\u2500 .progress.md\n\u2502   \u2514\u2500\u2500 .tasks.md\n\u2514\u2500\u2500 tests/\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 benchmarks/\n    \u2502   \u251c\u2500\u2500 __init__.py\n    \u2502   \u251c\u2500\u2500 test_memory_usage.py\n    \u2502   \u2514\u2500\u2500 test_sync_performance.py\n    \u251c\u2500\u2500 cli/\n    \u2502   \u251c\u2500\u2500 __init__.py\n    \u2502   \u2514\u2500\u2500 test_setup.py\n    \u251c\u2500\u2500 conftest.py\n    \u251c\u2500\u2500 core/\n    \u2502   \u251c\u2500\u2500 __init__.py\n    \u2502   \u251c\u2500\u2500 test_context.py\n    \u2502   \u251c\u2500\u2500 test_dynamic_updates.py\n    \u2502   \u251c\u2500\u2500 test_rule_applicator.py\n    \u2502   \u251c\u2500\u2500 test_rules.py\n    \u2502   \u251c\u2500\u2500 test_rules_parser.py\n    \u2502   \u251c\u2500\u2500 test_task.py\n    \u2502   \u251c\u2500\u2500 test_watcher.py\n    \u2502   \u2514\u2500\u2500 test_watcher_integration.py\n    \u251c\u2500\u2500 git/\n    \u2502   \u2514\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 ide/\n    \u2502   \u251c\u2500\u2500 test_cursor_integration.py\n    \u2502   \u2514\u2500\u2500 test_sync_integration.py\n    \u251c\u2500\u2500 packager/\n    \u2502   \u251c\u2500\u2500 test_collector.py\n    \u2502   \u2514\u2500\u2500 test_stdlib.py\n    \u251c\u2500\u2500 sync/\n    \u2502   \u2514\u2500\u2500 test_file_sync.py\n    \u251c\u2500\u2500 test_file_sync.py\n    \u251c\u2500\u2500 test_git_commits.py\n    \u251c\u2500\u2500 test_git_manager.py\n    \u251c\u2500\u2500 test_utils.py\n    \u2514\u2500\u2500 utils/\n        \u2514\u2500\u2500 __init__.py\n```\n\n---\n\n## Dependency Graph\n\n```mermaid\ngraph TD\n    subgraph \"Entry Points\"\n        A[__main__.py] --> B[erasmus.py]\n        B --> C[cli/commands.py]\n    end\n\n    subgraph \"Core Components\"\n        D[core/context.py] --> E[utils/paths.py]\n        D --> F[utils/logging.py]\n        G[core/watcher.py] --> F\n        G --> E\n        H[core/task.py] --> F\n        H --> E\n    end\n\n    subgraph \"CLI Components\"\n        C --> I[cli/protocol.py]\n        C --> J[cli/setup.py]\n        I --> K[utils/protocols/manager.py]\n        I --> D\n    end\n\n    subgraph \"Git Components\"\n        L[git/manager.py] --> F\n        L --> E\n        C --> L\n    end\n\n    subgraph \"Protocol Components\"\n        K --> M[utils/protocols/base.py]\n        K --> N[utils/path_manager.py]\n        K --> F\n    end\n\n    subgraph \"Utility Components\"\n        E --> O[utils/env.py]\n        E --> P[utils/env_manager.py]\n        F --> Q[utils/file.py]\n        F --> R[utils/file_ops.py]\n    end\n\n    subgraph \"IDE Integration\"\n        S[ide/cursor_integration.py] --> F\n        S --> E\n        T[ide/sync_integration.py] --> F\n        T --> E\n    end\n\n    subgraph \"Sync Components\"\n        U[sync/file_sync.py] --> F\n        U --> E\n    end\n```\n\n---\n\n## Component Dependencies\n\n### Entry Points\n\n- `__main__.py`: Main entry point for the Erasmus package\n- `erasmus.py`: Erasmus CLI entry point\n- `cli/commands.py`: CLI interface for Erasmus\n\n### Core Components\n\n- `core/context.py`: Context management system\n- `core/watcher.py`: File watching system\n- `core/task.py`: Task management system\n\n### CLI Components\n\n- `cli/protocol.py`: Protocol management commands\n- `cli/setup.py`: Project setup commands\n\n### Git Components\n\n- `git/manager.py`: Git repository management\n\n### Protocol Components\n\n- `utils/protocols/manager.py`: Protocol manager\n- `utils/protocols/base.py`: Base protocol classes\n- `utils/path_manager.py`: Path management for protocols\n\n### Utility Components\n\n- `utils/paths.py`: Path management\n- `utils/logging.py`: Logging utilities\n- `utils/env.py`: Environment utilities\n- `utils/env_manager.py`: Environment management\n- `utils/file.py`: File utilities\n- `utils/file_ops.py`: File operations\n\n### IDE Integration\n\n- `ide/cursor_integration.py`: Cursor IDE integration\n- `ide/sync_integration.py`: Sync IDE integration\n\n### Sync Components\n\n- `sync/file_sync.py`: File synchronization\n\n---\n\n## Key Dependencies\n\n1. **Context Management**\n\n   - Depends on path utilities and logging\n   - Used by CLI commands and protocol management\n\n2. **File Watching**\n\n   - Depends on path utilities and logging\n   - Used by CLI watch command\n\n3. **Task Management**\n\n   - Depends on path utilities and logging\n   - Used by CLI task commands\n\n4. **Git Management**\n\n   - Depends on path utilities and logging\n   - Used by CLI git commands\n\n5. **Protocol Management**\n\n   - Depends on path utilities, logging, and base protocol classes\n   - Used by CLI protocol commands\n\n6. **CLI Interface**\n   - Depends on all other components\n   - Provides the user interface for all functionality\n\n---\n\n## Goals\n\n- Convert a Python project into a single executable script\n- Automatically infer external dependencies from imports\n- Use `uv` to install and run dependencies in a temporary env\n- Support both Unix (bash) and Windows (batch) execution\n- Guarantee zero setup beyond Python and basic tools (`curl`, `winget`)\n- Preserve code structure and dependencies between files\n\n---\n\n## Features\n\n| Feature                      | Description                                                     |\n| ---------------------------- | --------------------------------------------------------------- |\n| Static import parsing        | Detects and de-duplicates imports using `ast`                   |\n| Dependency inference         | Resolves which packages are required from imports               |\n| Standard lib filtering       | Excludes stdlib modules from `uv add`                           |\n| No extra files               | No `venv`, no `requirements.txt`, no pip needed                 |\n| Clean CLI                    | Use `python -m packager` to bundle                              |\n| Cross-platform bootstrapping | Works with Bash (Linux/macOS) and Batch (Windows)               |\n| Single script output         | One file with shell header, dependency install, and Python code |\n| Dependency-aware stacking    | Orders files based on import dependencies                       |\n| Import categorization        | Groups imports by stdlib, third-party, local, and relative      |\n| Comment preservation         | Optionally preserves comments in the output script              |\n\n---\n\n## Architecture\n\n```\npackager/\n __main__.py         # CLI interface\n collector.py        # Recursively finds Python files\n parser.py           # Parses imports using AST\n builder.py          # Merges stripped code bodies and imports\n uv_wrapper.py       # Adds OS-aware shell and batch bootstrap\n mapping.py          # Optional import-to-PyPI mapping\n stdlib.py           # Contains stdlib detection for filtering\n```\n\n---\n\n## Detailed Component Design\n\n### `collector.py`\n\n```python\ndef collect_py_files(base_path: str) -> List[str]:\n    # Recursively yield all .py files\n```\n\n---\n\n### `parser.py`\n\n```python\nclass ImportSet:\n    # Manages categorized imports (stdlib, third-party, local, relative)\n    def __init__(self):\n        self.stdlib = set()\n        self.third_party = set()\n        self.local = set()\n        self.relative = set()\n\n    def update(self, other: 'ImportSet') -> None:\n        # Merge another ImportSet into this one\n\n    def get_all_imports(self) -> Set[str]:\n        # Return all imports across all categories\n\ndef extract_imports(source: str) -> ImportSet:\n    # Uses ast to extract imports and categorize them\n\ndef extract_code_body(source: str, preserve_comments: bool = True) -> Tuple[ImportSet, str]:\n    # Extracts imports and returns code body with imports removed\n```\n\n---\n\n### `mapping.py` (Optional)\n\n```python\n# Maps import names to PyPI packages\nPYPI_MAP = {\n    \"cv2\": \"opencv-python\",\n    \"PIL\": \"pillow\",\n}\n```\n\n---\n\n### `stdlib.py`\n\n```python\nclass StdlibDetector:\n    # Detects standard library modules\n    def __init__(self):\n        self.stdlib_modules = set()\n\n    def initialize(self) -> None:\n        # Populate stdlib_modules set\n\n    def is_stdlib_module(self, name: str) -> bool:\n        # Check if a module is part of the standard library\n```\n\n---\n\n### `builder.py`\n\n```python\ndef analyze_dependencies(files: List[Path]) -> Dict[Path, ImportSet]:\n    # Analyzes dependencies between files to determine stacking order\n\ndef order_files(dependencies: Dict[Path, ImportSet], files: List[Path]) -> List[Path]:\n    # Orders files based on their dependencies\n\ndef collect_all_imports(files: List[Union[str, Path]], base_path: Path) -> Tuple[ImportSet, ImportSet, ImportSet]:\n    # Collects and categorizes all imports from the given files\n\ndef format_imports(stdlib_imports: ImportSet, third_party_imports: ImportSet, local_imports: ImportSet) -> str:\n    # Formats imports into a string with proper grouping and sorting\n\ndef extract_code_body(source: str, preserve_comments: bool = True) -> Tuple[ImportSet, str]:\n    # Extracts imports and code body from source code\n\ndef build_script(files: List[Union[str, Path]], base_path: Optional[Path] = None, preserve_comments: bool = True) -> str:\n    # Builds a single script from multiple Python files with proper dependency ordering\n\ndef generate_script(input_path: Union[str, Path], output_path: Optional[str] = None, preserve_comments: bool = True) -> Optional[str]:\n    # Generates a single script from a Python file or directory\n```\n\n---\n\n### `uv_wrapper.py`\n\n```python\ndef generate_script(imports: Set[str], code: str) -> str:\n    # Returns final script string with:\n    # - Shebang\n    # - OS check (bash or batch)\n    # - uv install logic (curl or winget)\n    # - uv add <packages>\n    # - uv run path-to-script\n    # - Embedded Python code\n```\n\n---\n\n### `__main__.py`\n\n```python\ndef main():\n    # CLI interface for the packager\n    # Usage: python -m packager package <input_path> -o <output_path> [--no-comments]\n```\n\n---\n\n## Output Script Structure\n\n```bash\n#!/bin/bash\n# Cross-platform uv bootstrap\nOS=$(uname -s)\n\nif [[ \"$OS\" == \"Linux\" || \"$OS\" == \"Darwin\" ]]; then\n  if ! command -v uv >/dev/null; then\n    echo \"Installing uv...\"\n    if ! command -v curl >/dev/null; then\n      echo \"Missing 'curl'. Please install it.\"\n      exit 1\n    fi\n    curl -LsSf https://astral.sh/uv/install.sh | sh\n    export PATH=\"$HOME/.cargo/bin:$PATH\"\n  fi\n\n  uv add rich typer requests\n  uv run \"$0\" \"$@\"\n  exit $?\nfi\n\nREM Windows fallback\n@echo off\nwhere uv >nul 2>nul\nif %errorlevel% neq 0 (\n  echo Installing uv using winget...\n  winget install --id=astral-sh.uv -e\n)\n\nuv add rich typer requests\nuv run \"%~f0\" %*\nexit /b\n```\n\n_Followed by Python code:_\n\n```python\n#!/usr/bin/env python\n# Standard library imports\nimport os\nimport sys\n\n# Third-party imports\nimport typer\nimport requests\n\n# Local imports\nfrom my_package import utils\n\n# Relative imports\nfrom . import helpers\n\ndef main():\n    print(\"Hello from bundled script!\")\n\nif __name__ == \"__main__\":\n    main()\n```\n\n---\n\n## Testing Strategy\n\nTest Cases:\n\n| Scenario                   | Linux | macOS | Windows |\n| -------------------------- | ----- | ----- | ------- |\n| No `uv` installed          |       |       |         |\n| No `curl`                  |       |       | N/A     |\n| No `winget`                | N/A   | N/A   |         |\n| Missing dependency         |       |       |         |\n| Nested import structure    |       |       |         |\n| Works with entrypoint code |       |       |         |\n| Dependency ordering        |       |       |         |\n| Import categorization      |       |       |         |\n| Comment preservation       |       |       |         |\n\n---\n\n## Requirements\n\n| Tool        | Use                 |\n| ----------- | ------------------- |\n| `ast`       | Static parsing      |\n| `uv`        | Runtime environment |\n| `curl`      | Unix installer      |\n| `winget`    | Windows installer   |\n| Python 3.8+ | Runtime & toolchain |\n\n---\n\n## Future Improvements\n\n- Package metadata injection (name/version/help)\n- GUI/UX wrapper for non-devs\n- Compression/minification support\n- Add support for `.env` or config files\n- Optional `pyproject.toml` parser for metadata\n- Support for package-level imports\n- Improved handling of relative imports\n\n---\n\n## Pathing\n\n# Directory Structure\n\n- \ud83d\udcc1 **./**\n  - \ud83d\udcc1 **docs/**\n    - \ud83d\udcc4 **API_REFERENCE.md**\n    - \ud83d\udcc4 **INTEGRATION_GUIDE.md**\n    - \ud83d\udcc1 **api/**\n      - \ud83d\udcc4 **core.md**\n    - \ud83d\udcc1 **examples/**\n      - \ud83d\udcc1 **game_sync/**\n        - \ud83d\udcc4 **.architecture.md**\n    - \ud83d\udcc1 **guides/**\n      - \ud83d\udcc4 **integration.md**\n  - \ud83d\udcc1 **erasmus/**\n    - \ud83d\udcc4 \\***\\*init**.py\\*\\*\n    - \ud83d\udcc4 \\***\\*main**.py\\*\\*\n    - \ud83d\udcc1 **cli/**\n      - \ud83d\udcc4 \\***\\*init**.py\\*\\*\n      - \ud83d\udcc4 **commands.py**\n      - \ud83d\udcc4 **main.py**\n      - \ud83d\udcc4 **protocol.py**\n      - \ud83d\udcc4 **setup.py**\n    - \ud83d\udcc1 **core/**\n      - \ud83d\udcc4 \\***\\*init**.py\\*\\*\n      - \ud83d\udcc4 **context.py**\n      - \ud83d\udcc4 **dynamic_updates.py**\n      - \ud83d\udcc4 **ide_integration.py**\n      - \ud83d\udcc4 **rule_applicator.py**\n      - \ud83d\udcc4 **rules.py**\n      - \ud83d\udcc4 **rules_parser.py**\n      - \ud83d\udcc4 **task.py**\n      - \ud83d\udcc4 **watcher.py**\n    - \ud83d\udcc4 **erasmus.py**\n    - \ud83d\udcc1 **git/**\n      - \ud83d\udcc4 \\***\\*init**.py\\*\\*\n      - \ud83d\udcc4 **manager.py**\n    - \ud83d\udcc1 **ide/**\n      - \ud83d\udcc4 \\***\\*init**.py\\*\\*\n      - \ud83d\udcc4 **cursor_integration.py**\n      - \ud83d\udcc4 **sync_integration.py**\n    - \ud83d\udcc1 **sync/**\n      - \ud83d\udcc4 \\***\\*init**.py\\*\\*\n      - \ud83d\udcc4 **file_sync.py**\n    - \ud83d\udcc1 **utils/**\n      - \ud83d\udcc4 \\***\\*init**.py\\*\\*\n      - \ud83d\udcc4 **context.py**\n      - \ud83d\udcc4 **env.py**\n      - \ud83d\udcc4 **env_manager.py**\n      - \ud83d\udcc4 **file.py**\n      - \ud83d\udcc4 **file_ops.py**\n      - \ud83d\udcc4 **logging.py**\n      - \ud83d\udcc4 **path_constants.py**\n      - \ud83d\udcc4 **paths.py**\n      - \ud83d\udcc1 **protocols/**\n        - \ud83d\udcc4 \\***\\*init**.py\\*\\*\n        - \ud83d\udcc4 **agent_registry.json**\n        - \ud83d\udcc4 **base.py**\n        - \ud83d\udcc4 **cli.py**\n        - \ud83d\udcc4 **context.py**\n        - \ud83d\udcc4 **example.py**\n        - \ud83d\udcc4 **integration.py**\n        - \ud83d\udcc4 **manager.py**\n        - \ud83d\udcc4 **protocol_cli.py**\n        - \ud83d\udcc4 **server.py**\n        - \ud83d\udcc1 **stored/**\n          - \ud83d\udcc4 **CI_CD Agent.md**\n          - \ud83d\udcc4 **Code Review Agent.md**\n          - \ud83d\udcc4 **Debug Agent.md**\n          - \ud83d\udcc4 **Dependency Agent.md**\n          - \ud83d\udcc4 **Developer Agent.md**\n          - \ud83d\udcc4 **Documentation Agent.md**\n          - \ud83d\udcc4 **Orchestration Agent.md**\n          - \ud83d\udcc4 **Performance Agent.md**\n          - \ud83d\udcc4 **Product Owner Agent.json**\n          - \ud83d\udcc4 **Product Owner Agent.md**\n          - \ud83d\udcc4 **Security Agent.md**\n          - \ud83d\udcc4 **Style Agent.md**\n          - \ud83d\udcc4 **Testing Agent.md**\n          - \ud83d\udcc4 **agent_workflow.md**\n          - \ud83d\udcc4 **cidc.md**\n          - \ud83d\udcc4 **code_review.md**\n          - \ud83d\udcc4 **debugging.md**\n          - \ud83d\udcc4 **dependency.md**\n          - \ud83d\udcc4 **developer.md**\n          - \ud83d\udcc4 **documentation.md**\n          - \ud83d\udcc4 **orchestration.md**\n          - \ud83d\udcc4 **performance.md**\n          - \ud83d\udcc4 **product_owner.md**\n          - \ud83d\udcc4 **security.md**\n          - \ud83d\udcc4 **style.md**\n          - \ud83d\udcc4 **testing.md**\n      - \ud83d\udcc4 **protocols.py**\n  - \ud83d\udcc4 **erasmus.py**\n  - \ud83d\udcc4 **.progress.md**\n  - \ud83d\udcc1 **public/**\n    - \ud83d\udcc4 **flowchart.png**\n  - \ud83d\udcc4 **pyproject.toml**\n  - \ud83d\udcc1 **scripts/**\n    - \ud83d\udcc4 **cleanup.sh**\n    - \ud83d\udcc4 **setup_gamesync_demo.sh**\n    - \ud83d\udcc1 **test/**\n      - \ud83d\udcc4 **test_installer.sh**\n  - \ud83d\udcc1 **src/**\n    - \ud83d\udcc4 **collector.py**\n    - \ud83d\udcc4 **stdlib.py**\n  - \ud83d\udcc4 **.tasks.md**\n  - \ud83d\udcc1 **templates/**\n    - \ud83d\udcc4 **.architecture.md**\n    - \ud83d\udcc4 **.progress.md**\n    - \ud83d\udcc4 **.tasks.md**\n  - \ud83d\udcc1 **tests/**\n    - \ud83d\udcc4 \\***\\*init**.py\\*\\*\n    - \ud83d\udcc1 **benchmarks/**\n      - \ud83d\udcc4 \\***\\*init**.py\\*\\*\n      - \ud83d\udcc4 **test_memory_usage.py**\n      - \ud83d\udcc4 **test_sync_performance.py**\n    - \ud83d\udcc1 **cli/**\n      - \ud83d\udcc4 \\***\\*init**.py\\*\\*\n      - \ud83d\udcc4 **test_setup.py**\n    - \ud83d\udcc4 **conftest.py**\n    - \ud83d\udcc1 **core/**\n      - \ud83d\udcc4 \\***\\*init**.py\\*\\*\n      - \ud83d\udcc4 **test_context.py**\n      - \ud83d\udcc4 **test_dynamic_updates.py**\n      - \ud83d\udcc4 **test_rule_applicator.py**\n      - \ud83d\udcc4 **test_rules.py**\n      - \ud83d\udcc4 **test_rules_parser.py**\n      - \ud83d\udcc4 **test_task.py**\n      - \ud83d\udcc4 **test_watcher.py**\n      - \ud83d\udcc4 **test_watcher_integration.py**\n    - \ud83d\udcc1 **git/**\n      - \ud83d\udcc4 \\***\\*init**.py\\*\\*\n    - \ud83d\udcc1 **ide/**\n      - \ud83d\udcc4 **test_cursor_integration.py**\n      - \ud83d\udcc4 **test_sync_integration.py**\n    - \ud83d\udcc1 **packager/**\n      - \ud83d\udcc4 **test_collector.py**\n      - \ud83d\udcc4 **test_stdlib.py**\n    - \ud83d\udcc1 **sync/**\n      - \ud83d\udcc4 **test_file_sync.py**\n    - \ud83d\udcc4 **test_file_sync.py**\n    - \ud83d\udcc4 **test_git_commits.py**\n    - \ud83d\udcc4 **test_git_manager.py**\n    - \ud83d\udcc4 **test_utils.py**\n    - \ud83d\udcc1 **utils/**\n      - \ud83d\udcc4 \\***\\*init**.py\\*\\*\n  - \ud83d\udcc4 **README.md**\n  - \ud83d\udcc4 **uv.lock**\n  - \ud83d\udcc4 **version.json**\n  - \ud83d\udcc4 **walk.py**\n\n## Summary\n\nThis Python packager is a **fully cross-platform script bundler** that requires:\n\n- No setup\n- No environments\n- No external files\n\nIt outputs a **single script** that:\n\n- Bootstraps its dependencies using `uv`\n- Installs `uv` if necessary\n- Runs itself cleanly on any modern system\n",
  "progress": "# Development Progress\n\n## Components Overview\n\nThis document tracks the development progress of the Python Script Packager components as defined in the architecture document.\n\n## Development Schedule\n\n| Component       | Status    | Description                                           | Priority |\n| --------------- | --------- | ----------------------------------------------------- | -------- |\n| `stdlib.py`     | Completed | Contains stdlib detection for filtering imports       | 1        |\n| `collector.py`  | Completed | Recursively finds Python files in a project           | 2        |\n| `parser.py`     | Completed | Parses imports using AST and strips import statements | 3        |\n| `builder.py`    | Completed | Merges stripped code bodies and imports               | 4        |\n| `__main__.py`   | Completed | CLI interface for the packager                        | 5        |\n| `uv_wrapper.py` | Completed | Adds OS-aware shell and batch bootstrap               | 6        |\n| `mapping.py`    | Completed | Optional import-to-PyPI mapping                       | 7        |\n\n## Current Focus\n\nAll core components have been completed. The project is now ready for:\n\n1. Final integration testing\n2. Documentation review\n3. Performance optimization\n4. User feedback and refinements\n\n## Completion Criteria\n\nA component is considered complete when:\n\n- Implementation matches the architecture specification\n- Unit tests are written and passing\n- Documentation is complete\n- Code is reviewed and approved\n\n## Recent Updates\n\n### `mapping.py` Module (Completed)\n\nThe `mapping.py` module has been completed with the following features:\n\n- Mapping system for import names to PyPI packages\n- Handling of special cases and aliases\n- Support for custom mapping overrides\n- Integration with the packager workflow\n- Full test coverage\n\n### `uv_wrapper.py` Module (Completed)\n\nThe `uv_wrapper.py` module has been completed with the following features:\n\n- Cross-platform bootstrapping of `uv`\n- Automatic installation of `uv` using platform-specific methods\n- Support for both Unix (bash) and Windows (batch) execution\n- Proper handling of dependencies and environment setup\n- Full test coverage for all platforms\n\n### `builder.py` Module (Completed)\n\nThe `builder.py` module has been completed with the following features:\n\n- Dependency-aware file ordering to ensure proper code stacking\n- Import categorization (stdlib, third-party, local, relative)\n- Comment preservation option\n- Improved error handling\n- Full test coverage\n\n### `parser.py` Module (Completed)\n\nThe `parser.py` module has been completed with the following features:\n\n- `ImportSet` class for managing categorized imports\n- AST-based import extraction\n- Code body extraction with import removal\n- Support for preserving comments\n\n### `stdlib.py` Module (Completed)\n\nThe `stdlib.py` module has been completed with the following features:\n\n- `StdlibDetector` class for detecting standard library modules\n- Efficient caching of stdlib module names\n- Cross-version compatibility\n\n### `collector.py` Module (Completed)\n\nThe `collector.py` module has been completed with the following features:\n\n- Recursive file collection\n- Exclusion patterns for directories\n- Cross-platform compatibility\n\n### `__main__.py` Module (Completed)\n\nThe `__main__.py` module has been completed with the following features:\n\n- CLI interface using Typer\n- Support for packaging files or directories\n- Options for preserving comments and grouping imports\n",
  "tasks": "# Project Development Tasks\n\n## Project Initialization Tasks [COMPLETED]\n\n### Version Control Setup\n\n- [x] Initialize git repository in `./erasmus`\n- [x] Configure upstream repository connection\n- [x] Create initial commit with project structure\n\n### Package Management\n\n- [x] Set up `uv` package management\n- [x] Add initial dependencies to `watcher.py`\n- [x] Create `pyproject.toml` for dependency tracking\n\n## Core Functionality Tasks [COMPLETED]\n\n### Watcher Core Logic\n\n- [x] Design core workflow state machine\n- [x] Implement file watching mechanism\n- [x] Create context injection logic\n- [x] Develop IDE-specific rule injection\n\n### Git Management\n\n- [x] Refactor `git_manager.py` functionality\n- [x] Implement atomic commit system\n- [x] Create AI-powered commit message generator\n- [x] Add logging and error handling\n\n## Environment Setup Tasks [COMPLETED]\n\n### Cross-Platform Installation\n\n- [x] Create Unix `.sh` installation script\n- [x] Create Windows `.bat` installation script\n- [x] Implement package requirement checks\n- [x] Add uv installation logic\n- [x] Finalize cross-platform compatibility testing\n\n### Virtual Environment\n\n- [x] Configure Python virtual environment\n- [x] Set up testing frameworks (pytest)\n- [x] Create `.env.example` template\n- [x] Implement environment variable management\n\n### Environment Configuration Tasks [COMPLETED]\n\n- [x] Create `.env` file with initial configuration\n- [x] Generate `.env.example` for template configuration\n- [x] Document environment variable usage\n- [x] Add environment variable validation\n- [x] Implement IDE environment selection\n- [x] Add watcher initialization with environment\n\n## AI Integration Tasks [COMPLETED]\n\n### OpenAI Client\n\n- [x] Design local OpenAI client interface\n- [x] Implement commit message generation\n- [x] Create context tracking mechanism\n- [x] Add error handling and logging\n\n## Testing Tasks [IN PROGRESS]\n\n### Test Suite Development\n\n- [x] Create unit tests for core components\n- [x] Develop integration tests\n- [x] Implement cross-platform compatibility tests\n- [x] Set up continuous integration pipeline\n- [x] Create Docker testing environment\n- [ ] Test Docker installation process\n\n## Current Tasks\n\n### Documentation Tasks [HIGH PRIORITY]\n\n### Core Module Documentation\n\n- [ ] Document `watcher.py` core functions and classes\n  - [ ] Document context tracking mechanism\n  - [x] Document file watching system\n    - [x] Enhanced `BaseWatcher` class documentation\n    - [x] Enhanced `MarkdownWatcher` class documentation\n    - [x] Enhanced `ScriptWatcher` class documentation\n    - [x] Enhanced `run_observer` function documentation\n    - [x] Enhanced `update_specific_file` function documentation\n  - [ ] Document IDE integration features\n  - [x] Document GitManager class and git-related functions\n    - [x] Enhanced `determine_commit_type` with decision logic documentation\n    - [x] Enhanced `extract_commit_message` with processing steps documentation\n    - [x] Enhanced `make_atomic_commit` with workflow documentation\n    - [x] Enhanced `check_creds` with validation explanation\n  - [x] Document TaskManager functionality\n    - [x] Enhanced `manage_task` function with comprehensive documentation\n    - [x] Task and TaskManager classes already have good documentation\n  - [ ] Document command-line interface and arguments\n  - [ ] Create function and class relationship diagrams\n\n### Build System Documentation\n\n- [ ] Document `main.py` build process\n- [ ] Document `src/build_release.py` functionality\n- [ ] Document `src/embed_erasmus.py` process\n- [ ] Document `src/script_converter.py` functionality\n- [ ] Document `src/version_manager.py` functionality\n\n### Installation Scripts Documentation\n\n- [ ] Document `scripts/install.sh` functionality\n- [ ] Document Docker testing environment setup\n- [ ] Document cross-platform installation processes\n- [ ] Create installation workflow diagrams\n\n### User Documentation\n\n- [ ] Complete comprehensive README\n- [ ] Create step-by-step installation guide\n- [ ] Create usage documentation with examples\n- [ ] Develop troubleshooting guide\n- [ ] Create IDE configuration guide\n\n### Developer Documentation\n\n- [ ] Update .erasmus/.architecture.md with detailed system design\n- [ ] Create CONTRIBUTING.md with contribution guidelines\n- [ ] Document code style guidelines\n- [ ] Create developer setup guide\n- [ ] Document testing procedures\n\n### Build and Release Tasks [MEDIUM PRIORITY]\n\n### Release Directory Structure\n\n- [x] Move release directory to project root\n- [ ] Update build_release.py paths\n- [ ] Test build process with new paths\n- [ ] Update Docker testing paths\n\n### Release Preparation\n\n- [ ] Define versioning strategy\n- [ ] Create release checklist\n- [ ] Prepare initial release notes\n- [ ] Set up basic release workflow\n\n### Performance and Optimization Tasks [LOW PRIORITY]\n\n### Code Efficiency\n\n- [ ] Profile application performance\n- [ ] Identify and optimize bottlenecks\n- [ ] Review subprocess call efficiency\n- [ ] Minimize external dependency overhead\n\n### Resource Management\n\n- [ ] Analyze memory usage\n- [ ] Optimize file watching mechanism\n- [ ] Improve logging efficiency\n- [ ] Implement lightweight context tracking\n\n## Task Priority\n\n1. High: Comprehensive code documentation\n2. Medium: User guide and installation documentation\n3. Medium: Release directory restructuring and testing\n4. Low: Performance optimization and resource management\n\n## Progress Metrics\n\n- Total Tasks: 83\n- Completed: 38\n- In Progress: 25\n- Pending: 20\n- Completion Rate: 46%\n\n# Project Development Tasks\n\n## Project Initialization Tasks [COMPLETED]\n\n### Version Control Setup\n\n- [x] Initialize git repository in `./erasmus`\n- [x] Configure upstream repository connection\n- [x] Create initial commit with project structure\n\n### Package Management\n\n- [x] Set up `uv` package management\n- [x] Add initial dependencies to `watcher.py`\n- [x] Create `pyproject.toml` for dependency tracking\n\n## Core Functionality Tasks [COMPLETED]\n\n### Watcher Core Logic\n\n- [x] Design core workflow state machine\n- [x] Implement file watching mechanism\n- [x] Create context injection logic\n- [x] Develop IDE-specific rule injection\n\n### Git Management\n\n- [x] Refactor `git_manager.py` functionality\n- [x] Implement atomic commit system\n- [x] Create AI-powered commit message generator\n- [x] Add logging and error handling\n\n## Environment Setup Tasks [COMPLETED]\n\n### Cross-Platform Installation\n\n- [x] Create Unix `.sh` installation script\n- [x] Create Windows `.bat` installation script\n- [x] Implement package requirement checks\n- [x] Add uv installation logic\n- [x] Finalize cross-platform compatibility testing\n\n### Virtual Environment\n\n- [x] Configure Python virtual environment\n- [x] Set up testing frameworks (pytest)\n- [x] Create `.env.example` template\n- [x] Implement environment variable management\n\n### Environment Configuration Tasks [COMPLETED]\n\n- [x] Create `.env` file with initial configuration\n- [x] Generate `.env.example` for template configuration\n- [x] Document environment variable usage\n- [x] Add environment variable validation\n- [x] Implement IDE environment selection\n- [x] Add watcher initialization with environment\n\n## AI Integration Tasks [COMPLETED]\n\n### OpenAI Client\n\n- [x] Design local OpenAI client interface\n- [x] Implement commit message generation\n- [x] Create context tracking mechanism\n- [x] Add error handling and logging\n\n## Testing Tasks [IN PROGRESS]\n\n### Test Suite Development\n\n- [x] Create unit tests for core components\n- [x] Develop integration tests\n- [x] Implement cross-platform compatibility tests\n- [x] Set up continuous integration pipeline\n- [x] Create Docker testing environment\n- [ ] Test Docker installation process\n\n## Current Tasks\n\n### Documentation Tasks [HIGH PRIORITY]\n\n### Core Module Documentation\n\n- [ ] Document `watcher.py` core functions and classes\n  - [ ] Document context tracking mechanism\n  - [x] Document file watching system\n    - [x] Enhanced `BaseWatcher` class documentation\n    - [x] Enhanced `MarkdownWatcher` class documentation\n    - [x] Enhanced `ScriptWatcher` class documentation\n    - [x] Enhanced `run_observer` function documentation\n    - [x] Enhanced `update_specific_file` function documentation\n  - [ ] Document IDE integration features\n  - [x] Document GitManager class and git-related functions\n    - [x] Enhanced `determine_commit_type` with decision logic documentation\n    - [x] Enhanced `extract_commit_message` with processing steps documentation\n    - [x] Enhanced `make_atomic_commit` with workflow documentation\n    - [x] Enhanced `check_creds` with validation explanation\n  - [x] Document TaskManager functionality\n    - [x] Enhanced `manage_task` function with comprehensive documentation\n    - [x] Task and TaskManager classes already have good documentation\n  - [ ] Document command-line interface and arguments\n  - [ ] Create function and class relationship diagrams\n\n### Build System Documentation\n\n- [ ] Document `main.py` build process\n- [ ] Document `src/build_release.py` functionality\n- [ ] Document `src/embed_erasmus.py` process\n- [ ] Document `src/script_converter.py` functionality\n- [ ] Document `src/version_manager.py` functionality\n\n### Installation Scripts Documentation\n\n- [ ] Document `scripts/install.sh` functionality\n- [ ] Document Docker testing environment setup\n- [ ] Document cross-platform installation processes\n- [ ] Create installation workflow diagrams\n\n### User Documentation\n\n- [ ] Complete comprehensive README\n- [ ] Create step-by-step installation guide\n- [ ] Create usage documentation with examples\n- [ ] Develop troubleshooting guide\n- [ ] Create IDE configuration guide\n\n### Developer Documentation\n\n- [ ] Update .erasmus/.architecture.md with detailed system design\n- [ ] Create CONTRIBUTING.md with contribution guidelines\n- [ ] Document code style guidelines\n- [ ] Create developer setup guide\n- [ ] Document testing procedures\n\n### Build and Release Tasks [MEDIUM PRIORITY]\n\n### Release Directory Structure\n\n- [x] Move release directory to project root\n- [ ] Update build_release.py paths\n- [ ] Test build process with new paths\n- [ ] Update Docker testing paths\n\n### Release Preparation\n\n- [ ] Define versioning strategy\n- [ ] Create release checklist\n- [ ] Prepare initial release notes\n- [ ] Set up basic release workflow\n\n### Performance and Optimization Tasks [LOW PRIORITY]\n\n### Code Efficiency\n\n- [ ] Profile application performance\n- [ ] Identify and optimize bottlenecks\n- [ ] Review subprocess call efficiency\n- [ ] Minimize external dependency overhead\n\n### Resource Management\n\n- [ ] Analyze memory usage\n- [ ] Optimize file watching mechanism\n- [ ] Improve logging efficiency\n- [ ] Implement lightweight context tracking\n\n## Task Priority\n\n1. High: Comprehensive code documentation\n2. Medium: User guide and installation documentation\n3. Medium: Release directory restructuring and testing\n4. Low: Performance optimization and resource management\n\n## Progress Metrics\n\n- Total Tasks: 83\n- Completed: 38\n- In Progress: 25\n- Pending: 20\n- Completion Rate: 46%\n",
  "protocols": [
    "Debug Agent",
    "Style Agent",
    "Developer Agent",
    "Orchestration Agent"
  ],
  "protocol_markdown": "",
  "current_protocol": "# Developer Agent\n\n## Role\n\ncode_implementation\n\n## Triggers\n\narchitecture_complete, code_review_issues, test_failures, style_issues, security_issues, performance_issues, dependency_issues\n\n## Produces\n\nimplementation_code, .tasks.md\n\n## Consumes\n\n.erasmus/.architecture.md, .progress.md, debug_reports, style_reports\n\n## Description\n\nThis is a protocol for the Developer Agent role.\n",
  "protocol_role": "issue_diagnosis",
  "protocol_triggers": [],
  "protocol_produces": [],
  "protocol_consumes": [],
  "context_dir": "/home/bakobi/repos/erasmus/.erasmus/context"
}