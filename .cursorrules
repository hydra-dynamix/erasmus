<?xml version="1.0" encoding="UTF-8"?>
<MetaRules>
  <?xml version="1.0" encoding="UTF-8"?> 
<Architecture>
  <Version>0.2.0</Version> 
  <Title>Erasmus - Context Management and Protocol Handling</Title>
  <Overview>
    <Description>Erasmus is a library for managing development context, protocols, and Model Context Protocol (MCP) interactions. It provides a robust, testable, and maintainable solution for handling development rules and context management.</Description>
  </Overview>
  <CoreComponents>
    <Component>
      <Name>Path Management</Name>
      <Purpose>Centralized path management for different IDE environments</Purpose>
      <Features>
        <Feature>IDE environment detection from environment variables</Feature>
        <Feature>Interactive IDE selection when environment variable is not set</Feature>
        <Feature>Consistent path structure across different IDEs</Feature>
        <Feature>Automatic directory and file creation</Feature>
        <Feature>Symlink management for cross-IDE compatibility</Feature>
      </Features>
      <Implementation>
        <Detail>PathMngrModel for managing all paths</Detail>
        <Detail>IDE enum with metadata for each supported IDE</Detail>
        <Detail>Environment variable detection with fallback to user input</Detail>
        <Detail>Singleton pattern for global path access</Detail>
      </Implementation>
      <SupportedIDEs>
        <IDE>
          <Name>Windsurf</Name>
          <RulesFile>.windsurfrules</RulesFile>
          <GlobalRulesPath>~/.codeium/windsurf/memories/global_rules.md</GlobalRulesPath>
          <SymlinkToCursor>true</SymlinkToCursor>
        </IDE>
        <IDE>
          <Name>Cursor</Name>
          <RulesFile>.cursorrules</RulesFile>
          <GlobalRulesPath>~/.cursor/global_rules.md</GlobalRulesPath>
          <SymlinkToCursor>false</SymlinkToCursor>
        </IDE>
        <IDE>
          <Name>Codex</Name>
          <RulesFile>codex.md</RulesFile>
          <GlobalRulesPath>~/.codex/instructions.md</GlobalRulesPath>
          <SymlinkToCursor>false</SymlinkToCursor>
        </IDE>
        <IDE>
          <Name>Claude</Name>
          <RulesFile>CLAUDE.md</RulesFile>
          <GlobalRulesPath>~/.claude/CLAUDE.md</GlobalRulesPath>
          <SymlinkToCursor>false</SymlinkToCursor>
        </IDE>
      </SupportedIDEs>
    </Component>
    <Component>
      <Name>Environment Management</Name>
      <Purpose>Generic, type-safe environment variable management</Purpose>
      <Features>
        <Feature>Dynamic variable definition (required/optional)</Feature>
        <Feature>Strong type validation</Feature>
        <Feature>Value constraints (min/max, patterns)</Feature>
        <Feature>Custom validation functions</Feature>
        <Feature>File-based loading (.env)</Feature>
        <Feature>System environment loading</Feature>
        <Feature>Configuration merging</Feature>
      </Features>
      <Implementation>
        <Detail>EnvironmentConfig class for managing variables</Detail>
        <Detail>VariableDefinition for type and constraint definitions</Detail>
        <Detail>Comprehensive validation system</Detail>
        <Detail>Error handling with descriptive messages</Detail>
      </Implementation>
    </Component>
    <Component>
      <Name>File Monitor Service</Name>
      <Purpose>Monitors changes in ctx.architecture.md, ctx.progress.md, and ctx.tasks.md and applies the changes to .windsurfrules and/or .cursorrules files</Purpose>
      <Responsibilities>
        <Responsibility>Watch for changes in architecture, progress, and tasks files</Responsibility>
        <Responsibility>Update rules file when changes are detected</Responsibility>
        <Responsibility>Maintain file system event listeners</Responsibility>
      </Responsibilities>
      <Implementation>
        <Detail>Uses watchdog for file system events</Detail>
        <Detail>Efficient event handling</Detail>
        <Detail>Robust error recovery</Detail>
      </Implementation>
    </Component>
    <Component>
      <Name>Context Manager</Name>
      <Purpose>Manages development context files</Purpose>
      <Responsibilities>
        <Responsibility>Save/load context files to/from .erasmus/context directory</Responsibility>
        <Responsibility>Parse and sanitize document names</Responsibility>
        <Responsibility>Ensure ASCII-only characters</Responsibility>
        <Responsibility>Handle file operations safely</Responsibility>
      </Responsibilities>
      <Implementation>
        <Detail>Safe file operations</Detail>
        <Detail>Content sanitization</Detail>
        <Detail>Error handling</Detail>
      </Implementation>
    </Component>
    <Component>
      <Name>Protocol Handler</Name>
      <Purpose>Manages protocol definitions</Purpose>
      <Responsibilities>
        <Responsibility>Add protocols to context objects</Responsibility>
        <Responsibility>Preserve existing content</Responsibility>
        <Responsibility>Load/save protocols from/to .erasmus/protocol folder</Responsibility>
      </Responsibilities>
      <Implementation>
        <Detail>Protocol validation</Detail>
        <Detail>Content preservation</Detail>
        <Detail>File operations</Detail>
      </Implementation>
    </Component>
    <Component>
      <Name>MCP Integration</Name>
      <Purpose>Model Context Protocol management</Purpose>
      <Components>
        <SubComponent>
          <Name>Registry Manager</Name>
          <Detail>Load from JSON configuration</Detail>
          <Detail>Server registration</Detail>
        </SubComponent>
        <SubComponent>
          <Name>Client Implementation</Name>
          <Detail>Python SDK integration</Detail>
          <Detail>Request handling</Detail>
        </SubComponent>
        <SubComponent>
          <Name>Server Implementation</Name>
          <Detail>CLI mirroring</Detail>
          <Detail>Request processing</Detail>
        </SubComponent>
      </Components>
    </Component>
    <Component>
      <Name>CLI Interface</Name>
      <Purpose>User interaction layer</Purpose>
      <Responsibilities>
        <Responsibility>Context management</Responsibility>
        <Responsibility>Protocol management</Responsibility>
        <Responsibility>MCP server management</Responsibility>
      </Responsibilities>
    </Component>
  </CoreComponents>
  <DevelopmentPrinciples>
    <Principle>
      <Name>Testing Strategy</Name>
      <Detail>Unit tests for each component</Detail>
      <Detail>Integration tests for component interaction</Detail>
      <Detail>End-to-end tests for CLI operations</Detail>
      <Detail>Mock external dependencies</Detail>
      <Detail>Test coverage requirements: 80% minimum</Detail>
    </Principle>
    <Principle>
      <Name>Code Quality</Name>
      <Detail>Type hints throughout</Detail>
      <Detail>Comprehensive documentation</Detail>
      <Detail>Error handling with proper logging</Detail>
      <Detail>Clean code principles</Detail>
      <Detail>KISS (Keep It Simple, Stupid) approach</Detail>
    </Principle>
    <Principle>
      <Name>Configuration Management</Name>
      <Detail>Centralized path management</Detail>
      <Detail>Environment variable handling</Detail>
      <Detail>No hardcoded values</Detail>
      <Detail>Configuration validation</Detail>
      <Detail>IDE environment detection</Detail>
    </Principle>
    <Principle>
      <Name>Error Handling</Name>
      <Detail>Graceful degradation</Detail>
      <Detail>Detailed error logging</Detail>
      <Detail>User-friendly error messages</Detail>
      <Detail>Recovery mechanisms</Detail>
    </Principle>
    <Principle>
      <Name>Data Modeling</Name>
      <Detail>Use Pydantic models for serializable data structures</Detail>
      <Detail>Use NamedTuple for simple, immutable data structures</Detail>
      <Detail>Modern type hints (lowercase list, dict, | for union)</Detail>
      <Detail>Type safety throughout the codebase</Detail>
    </Principle>
  </DevelopmentPrinciples>
  <Requirements>
    <Requirement>
      <Name>nano (text editor)</Name>
      <Description>The CLI uses 'nano' as the default editor for editing context files. Users may set a different editor by configuring the EDITOR environment variable.</Description>
    </Requirement>
  </Requirements>
  <Dependencies>
    <Dependency>Python 3.8+</Dependency>
    <Dependency>loguru</Dependency>
    <Dependency>modelcontextprotocol/python-sdk | mcp[cli]</Dependency>
    <Dependency>pytest (testing)</Dependency>
    <Dependency>typer (CLI)</Dependency>
    <Dependency>watchdog (file monitoring)</Dependency>
  </Dependencies>
  <DirectoryStructure>
    <Directory>
      <Path>erasmus/</Path>
      <SubDirectory>
        <Path>.erasmus/</Path>
        <Description>Library working files</Description>
        <SubDirectory>
          <Path>protocol/</Path>
          <Description>Protocol definitions</Description>
        </SubDirectory>
        <SubDirectory>
          <Path>context/</Path>
          <Description>Context Folders</Description>
          <SubDirectory>
            <Path>{context_name}/</Path>
            <Description>Labeled by name</Description>
            <File>
              <Name>ctx.architecture.md</Name>
              <Description>Architecture doc</Description>
            </File>
            <File>
              <Name>ctx.progress.md</Name>
              <Description>Progress doc</Description>
            </File>
            <File>
              <Name>ctx.tasks.md</Name>
              <Description>Tasks doc</Description>
            </File>
          </SubDirectory>
        </SubDirectory>
      </SubDirectory>
      <SubDirectory>
        <Path>src/</Path>
        <SubDirectory>
          <Path>monitor/</Path>
          <Description>File monitoring</Description>
        </SubDirectory>
        <SubDirectory>
          <Path>context/</Path>
          <Description>Context management</Description>
        </SubDirectory>
        <SubDirectory>
          <Path>protocol/</Path>
          <Description>Protocol handling</Description>
        </SubDirectory>
        <SubDirectory>
          <Path>logging/</Path>
          <Description>Logging system</Description>
        </SubDirectory>
        <SubDirectory>
          <Path>mcp/</Path>
          <Description>MCP integration</Description>
        </SubDirectory>
        <SubDirectory>
          <Path>cli/</Path>
          <Description>Command line interface</Description>
        </SubDirectory>
      </SubDirectory>
      <SubDirectory>
        <Path>tests/</Path>
        <Description>Test suite</Description>
      </SubDirectory>
      <SubDirectory>
        <Path>config/</Path>
        <Description>Configuration files</Description>
      </SubDirectory>
      <File>
        <Name>.cursorrules | .windsurfrules</Name>
        <Description>Rules file and injected context</Description>
      </File>
      <File>
        <Name>.ctx.architecture.xml</Name>
        <Description>Monitored design doc</Description>
      </File>
      <File>
        <Name>.ctx.progress.xml</Name>
        <Description>Monitored development schedule</Description>
      </File>
      <File>
        <Name>.ctx.tasks.xml</Name>
        <Description>Monitored task list</Description>
      </File>
    </Directory>
  </DirectoryStructure>
  <DevelopmentWorkflow>
    <Step>Component selection from PROGRESS.md</Step>
    <Step>Task breakdown in TASKS.md</Step>
    <Step>Test-driven development</Step>
    <Step>Code review</Step>
    <Step>Integration testing</Step>
    <Step>Documentation update</Step> 
  </DevelopmentWorkflow> 
  <DesignConsiderations>
    <Item>Use clear naming conventions for all path and content accessors:</Item>
    <Item>Methods that return a path should use the <code>_path</code> suffix (e.g., <code>get_context_dir_path</code>), and methods that return content should use the <code>_content</code> suffix. This ensures clarity and maintainability throughout the codebase.</Item>
  </DesignConsiderations>
</Architecture>   
  <?xml version="1.0" encoding="UTF-8"?>
<Progress> 
  <Phase> 
    <Name>Phase 1: Core Infrastructure</Name>
    <Status>Completed</Status>
    <Tasks>
      <Task>
        <Name>Project scaffolding</Name>
        <Status>Completed</Status>
      </Task> 
      <Task>
        <Name>Environment and Path Management</Name>
        <Status>Completed</Status>  
        <Subtasks>
          <Subtask>
            <Name>Complete environment.py implementation</Name>
            <Status>Completed</Status>
          </Subtask>
          <Subtask>
            <Name>Complete paths.py implementation</Name>
            <Status>Completed</Status>
          </Subtask>
          <Subtask>
            <Name>Add environment variable validation</Name>
            <Status>Completed</Status>
          </Subtask>
          <Subtask>
            <Name>Add path validation and sanitization</Name>
            <Status>Completed</Status>
          </Subtask>
          <Subtask>
            <Name>Unit tests for environment management</Name>
            <Status>Pending</Status>
          </Subtask>
          <Subtask>
            <Name>Unit tests for path management</Name>
            <Status>Pending</Status>
          </Subtask>
        </Subtasks>
      </Task>
    </Tasks>
  </Phase>
  <Phase>
    <Name>Phase 2: Context Management</Name>
    <Status>Completed</Status>
    <Tasks>
      <Task>
        <Name>File Monitor Service</Name>
        <Status>Completed</Status>
        <Subtasks>
          <Subtask>
            <Name>Complete file_monitor.py implementation</Name>
            <Status>Completed</Status>
          </Subtask>
          <Subtask>
            <Name>Add file watching functionality</Name>
            <Status>Completed</Status>
          </Subtask>
          <Subtask>
            <Name>Implement event handling</Name>
            <Status>Completed</Status>
          </Subtask>
          <Subtask>
            <Name>Add debouncing</Name>
            <Status>Completed</Status>
          </Subtask>
          <Subtask>
            <Name>Unit tests for file monitoring</Name>
            <Status>Pending</Status>
          </Subtask>
          <Subtask>
            <Name>Integration tests for file operations</Name>
            <Status>Pending</Status>
          </Subtask>
          <Subtask>
            <Name>Refactor file monitor to use template/merge pattern for rules file updates (manual_update.py logic)</Name>
            <Status>Completed</Status>
          </Subtask>
        </Subtasks>
      </Task>
      <Task>
        <Name>Context System</Name>
        <Status>Completed</Status>
        <Subtasks>
          <Subtask>
            <Name>Complete context.py implementation</Name>
            <Status>Completed</Status>
          </Subtask>
          <Subtask>
            <Name>Implement context file parsing</Name>
            <Status>Completed</Status>
          </Subtask>
          <Subtask>
            <Name>Add ASCII sanitization</Name>
            <Status>Completed</Status>
          </Subtask>
          <Subtask>
            <Name>Unit tests for context management</Name>
            <Status>Pending</Status>
          </Subtask>
          <Subtask>
            <Name>Integration tests for file operations</Name>
            <Status>Pending</Status>
          </Subtask>
        </Subtasks>
      </Task>
    </Tasks>
  </Phase>
  <Phase>
    <Name>Phase 3: Protocol System</Name>
    <Status>Completed</Status>
    <Tasks>
      <Task>
        <Name>Protocol Handler</Name>
        <Status>Completed</Status>
        <Subtasks>
          <Subtask>
            <Name>Complete protocols.py implementation</Name>
            <Status>Completed</Status>
          </Subtask>
          <Subtask>
            <Name>Add protocol validation</Name>
            <Status>Completed</Status>
          </Subtask>
          <Subtask>
            <Name>Implement protocol storage</Name>
            <Status>Completed</Status>
          </Subtask>
          <Subtask>
            <Name>Add protocol versioning</Name>
            <Status>Completed</Status>
          </Subtask>
          <Subtask>
            <Name>Unit tests for protocol management</Name>
            <Status>Pending</Status>
          </Subtask>
          <Subtask>
            <Name>Integration tests for protocol operations</Name>
            <Status>Pending</Status>
          </Subtask>
        </Subtasks>
      </Task>
    </Tasks>
  </Phase>
  <Phase>
    <Name>Phase 4: MCP Integration</Name>
    <Status>In Progress</Status>
    <Tasks>
      <Task>
        <Name>MCP Core</Name>
        <Status>In Progress</Status>
        <Subtasks>
          <Subtask>
            <Name>Complete mcp.py implementation</Name>
            <Status>Completed</Status>
          </Subtask>
          <Subtask>
            <Name>Add registry management</Name>
            <Status>Completed</Status>
          </Subtask>
          <Subtask>
            <Name>Implement client functionality</Name>
            <Status>Completed</Status>
          </Subtask>
          <Subtask>
            <Name>Add server implementation</Name>
            <Status>Completed</Status>
          </Subtask>
          <Subtask>
            <Name>Unit tests for MCP operations</Name>
            <Status>Pending</Status>
          </Subtask>
          <Subtask>
            <Name>Integration tests for client-server communication</Name>
            <Status>Pending</Status>
          </Subtask>
        </Subtasks>
      </Task>
    </Tasks>
  </Phase>
  <Phase>
    <Name>Phase 5: CLI and Logging</Name>
    <Status>In Progress</Status>
    <Tasks>
      <Task>
        <Name>Command Line Interface</Name>
        <Status>Completed</Status>
        <Subtasks>
          <Subtask>
            <Name>Complete cli.py implementation</Name>
            <Status>Completed</Status>
          </Subtask>
          <Subtask>
            <Name>Add command parsing</Name>
            <Status>Completed</Status>
          </Subtask>
          <Subtask>
            <Name>Implement user interaction</Name>
            <Status>Completed</Status>
          </Subtask>
          <Subtask>
            <Name>Unit tests for CLI</Name>
            <Status>Pending</Status>
          </Subtask>
        </Subtasks>
      </Task>
      <Task>
        <Name>Logging and Error Handling</Name>
        <Status>Completed</Status>
        <Subtasks>
          <Subtask>
            <Name>Implement logging with loguru</Name>
            <Status>Completed</Status>
          </Subtask>
          <Subtask>
            <Name>Add error handling to CLI modules</Name>
            <Status>Completed</Status>
          </Subtask>
          <Subtask>
            <Name>Standardize error reporting with print_table</Name>
            <Status>Completed</Status>
          </Subtask>
        </Subtasks>
      </Task>
    </Tasks>
  </Phase>
  <Phase>
    <Name>Phase 6: Testing and Documentation</Name>
    <Status>In Progress</Status>
    <Tasks>
      <Task>
        <Name>Testing Infrastructure</Name>
        <Status>In Progress</Status>
        <Subtasks>
          <Subtask>
            <Name>Set up pytest configuration</Name>
            <Status>Completed</Status>
          </Subtask>
          <Subtask>
            <Name>Add test fixtures</Name>
            <Status>Completed</Status>
          </Subtask>
          <Subtask>
            <Name>Implement test utilities</Name>
            <Status>Completed</Status>
          </Subtask>
          <Subtask>
            <Name>Add coverage reporting</Name>
            <Status>Completed</Status>
          </Subtask>
          <Subtask>
            <Name>Set up CI pipeline</Name>
            <Status>Pending</Status>
          </Subtask>
        </Subtasks>
      </Task>
      <Task>
        <Name>Documentation</Name>
        <Status>In Progress</Status>
        <Subtasks>
          <Subtask>
            <Name>Add API documentation</Name>
            <Status>Pending</Status>
          </Subtask>
          <Subtask>
            <Name>Create user guide</Name>
            <Status>Pending</Status>
          </Subtask>
          <Subtask>
            <Name>Add development guide</Name>
            <Status>Pending</Status>
          </Subtask>
          <Subtask>
            <Name>Create contribution guide</Name>
            <Status>Pending</Status>
          </Subtask>
          <Subtask>
            <Name>Add examples</Name>
            <Status>Pending</Status>
          </Subtask>
        </Subtasks>
      </Task>
      <Task>
        <Name>Style Enforcement</Name>
        <Status>Pending</Status>
        <Subtasks>
          <Subtask>
            <Name>Add automated linting (e.g., flake8, black)</Name>
            <Status>Pending</Status>
          </Subtask>
        </Subtasks>
      </Task>
    </Tasks>
  </Phase>
  <CurrentFocus>
    <Phase>Phase 4: MCP Integration</Phase>
    <Priority>MCP Core</Priority>
    <NextTask>Complete mcp.py implementation</NextTask>
  </CurrentFocus>
  <Notes>
    <Note>Each component should be developed following TDD principles</Note>
    <Note>All code changes must include corresponding tests</Note>
    <Note>Documentation should be updated as features are completed</Note>
    <Note>Integration tests should be added after unit tests pass</Note>
    <Note>File monitor refactor to use template/merge pattern is a priority for next iteration</Note>
    <Note>CI pipeline and style enforcement are important for project maturity</Note>
  </Notes>
  <Note>All core features are working. Next priority: update and expand tests for all modules.</Note>
</Progress> 
  <?xml version="1.0" encoding="UTF-8"?>
<Tasks>
  <CurrentTasks>
    <Task> 
      <Name>Environment and Path Management</Name>
      <Description>Implement environment variable management with validation and type safety.</Description>
      <Subtasks>
        <Subtask>
          <Name>Create environment variable schema</Name>
          <Status>Completed</Status>
          <Subtasks>
            <Subtask>
              <Name>Define required variables</Name>
              <Status>Completed</Status>
            </Subtask>
            <Subtask>
              <Name>Define optional variables</Name>
              <Status>Completed</Status>
            </Subtask>
            <Subtask>
              <Name>Define variable types and constraints</Name>
              <Status>Completed</Status>
            </Subtask>
          </Subtasks>
        </Subtask>
        <Subtask>
          <Name>Implement environment loading</Name>
          <Status>Completed</Status>
          <Subtasks>
            <Subtask>
              <Name>Load from .env file</Name>
              <Status>Completed</Status>
            </Subtask>
            <Subtask>
              <Name>Load from system environment</Name>
              <Status>Completed</Status>
            </Subtask>
            <Subtask>
              <Name>Handle missing variables</Name>
              <Status>Completed</Status>
            </Subtask>
            <Subtask>
              <Name>Validate variable types</Name>
              <Status>Completed</Status>
            </Subtask>
          </Subtasks>
        </Subtask>
        <Subtask>
          <Name>Add environment validation</Name>
          <Status>Completed</Status>
          <Subtasks>
            <Subtask>
              <Name>Type checking</Name>
              <Status>Completed</Status>
            </Subtask>
            <Subtask>
              <Name>Required field validation</Name>
              <Status>Completed</Status>
            </Subtask>
            <Subtask>
              <Name>Format validation</Name>
              <Status>Completed</Status>
            </Subtask>
            <Subtask>
              <Name>Value range validation</Name>
              <Status>Completed</Status>
            </Subtask>
          </Subtasks>
        </Subtask>
      </Subtasks>
      <Tests>
        <Test>
          <Name>Test environment loading</Name>
          <Code>
            <![CDATA[
            def test_load_environment():
                # Test loading from .env
                # Test loading from system
                # Test missing variables
                # Test invalid types
            ]]>
          </Code>
        </Test>
        <Test>
          <Name>Test environment validation</Name>
          <Code>
            <![CDATA[
            def test_validate_environment():
                # Test type validation
                # Test required fields
                # Test format validation
                # Test value ranges
            ]]>
          </Code>
        </Test>
      </Tests>
    </Task>
    <Task>
      <Name>Path Management</Name>
      <Description>Implement centralized path management with validation and sanitization.</Description>
      <Subtasks>
        <Subtask>
          <Name>Create path configuration</Name>
          <Status>Completed</Status>
          <Subtasks>
            <Subtask>
              <Name>Define base paths</Name>
              <Status>Completed</Status>
            </Subtask>
            <Subtask>
              <Name>Define relative paths</Name>
              <Status>Completed</Status>
            </Subtask>
            <Subtask>
              <Name>Define path templates</Name>
              <Status>Completed</Status>
            </Subtask>
          </Subtasks>
        </Subtask>
        <Subtask>
          <Name>Implement path resolution</Name>
          <Status>Completed</Status>
          <Subtasks>
            <Subtask>
              <Name>Resolve absolute paths</Name>
              <Status>Completed</Status>
            </Subtask>
            <Subtask>
              <Name>Resolve relative paths</Name>
              <Status>Completed</Status>
            </Subtask>
            <Subtask>
              <Name>Handle path templates</Name>
              <Status>Completed</Status>
            </Subtask>
            <Subtask>
              <Name>Handle path variables</Name>
              <Status>Completed</Status>
            </Subtask>
          </Subtasks>
        </Subtask>
        <Subtask>
          <Name>Add path validation</Name>
          <Status>Completed</Status>
          <Subtasks>
            <Subtask>
              <Name>Path existence check</Name>
              <Status>Completed</Status>
            </Subtask>
            <Subtask>
              <Name>Path permission check</Name>
              <Status>Completed</Status>
            </Subtask>
            <Subtask>
              <Name>Path sanitization</Name>
              <Status>Completed</Status>
            </Subtask>
            <Subtask>
              <Name>Path normalization</Name>
              <Status>Completed</Status>
            </Subtask>
          </Subtasks>
        </Subtask>
      </Subtasks>
      <Tests>
        <Test>
          <Name>Test path resolution</Name>
          <Code>
            <![CDATA[
            def test_resolve_paths():
                # Test absolute paths
                # Test relative paths
                # Test path templates
                # Test path variables
            ]]>
          </Code>
        </Test>
        <Test>
          <Name>Test path validation</Name>
          <Code>
            <![CDATA[
            def test_validate_paths():
                # Test path existence
                # Test permissions
                # Test sanitization
                # Test normalization
            ]]>
          </Code>
        </Test>
      </Tests>
    </Task>
    <Task>
      <Name>Error Handling</Name>
      <Description>Implement robust error handling for environment and path operations.</Description>
      <Subtasks>
        <Subtask>
          <Name>Define error types</Name>
          <Status>Completed</Status>
          <Subtasks>
            <Subtask>
              <Name>Define environment errors</Name>
              <Status>Completed</Status>
            </Subtask>
            <Subtask>
              <Name>Define path errors</Name>
              <Status>Completed</Status>
            </Subtask>
            <Subtask>
              <Name>Define validation errors</Name>
              <Status>Completed</Status>
            </Subtask>
          </Subtasks>
        </Subtask>
        <Subtask>
          <Name>Implement error handling logic</Name>
          <Status>Completed</Status>
        </Subtask>
        <Subtask>
          <Name>Integrate error handling into CLI</Name>
          <Status>Completed</Status>
        </Subtask>
      </Subtasks>
    </Task>
    <Task>
      <Name>Context Management</Name>
      <Description>Implement context file management and operations.</Description>
      <Subtasks>
        <Subtask>
          <Name>Implement context.py</Name>
          <Status>Completed</Status>
        </Subtask>
        <Subtask>
          <Name>Implement context file parsing</Name>
          <Status>Completed</Status>
        </Subtask>
        <Subtask>
          <Name>Add ASCII sanitization</Name>
          <Status>Completed</Status>
        </Subtask>
      </Subtasks>
      <Tests>
        <Test>
          <Name>Test context file operations</Name>
          <Code>
            <![CDATA[
            def test_context_file_ops():
                # Test context creation
                # Test context loading
                # Test context editing
            ]]>
          </Code>
        </Test>
      </Tests>
    </Task>
    <Task>
      <Name>Protocol Management</Name>
      <Description>Implement protocol file management and operations.</Description>
      <Subtasks>
        <Subtask>
          <Name>Implement protocols.py</Name>
          <Status>Completed</Status>
        </Subtask>
        <Subtask>
          <Name>Add protocol validation</Name>
          <Status>Completed</Status>
        </Subtask>
        <Subtask>
          <Name>Implement protocol storage</Name>
          <Status>Completed</Status>
        </Subtask>
        <Subtask>
          <Name>Add protocol versioning</Name>
          <Status>Completed</Status>
        </Subtask>
      </Subtasks>
      <Tests>
        <Test>
          <Name>Test protocol file operations</Name>
          <Code>
            <![CDATA[
            def test_protocol_file_ops():
                # Test protocol creation
                # Test protocol loading
                # Test protocol editing
            ]]>
          </Code>
        </Test>
      </Tests>
    </Task>
    <Task>
      <Name>File Monitor Service</Name>
      <Description>Implement file monitoring and rules file merging.</Description>
      <Subtasks>
        <Subtask>
          <Name>Implement file_monitor.py</Name>
          <Status>Completed</Status>
        </Subtask>
        <Subtask>
          <Name>Add file watching functionality</Name>
          <Status>Completed</Status>
        </Subtask>
        <Subtask>
          <Name>Implement event handling</Name>
          <Status>Completed</Status>
        </Subtask>
        <Subtask>
          <Name>Add debouncing</Name>
          <Status>Completed</Status>
        </Subtask>
        <Subtask>
          <Name>Refactor to use template/merge pattern for rules file updates</Name>
          <Status>Completed</Status>
        </Subtask>
      </Subtasks>
      <Tests>
        <Test>
          <Name>Test file monitoring</Name>
          <Code>
            <![CDATA[
            def test_file_monitoring():
                # Test file change detection
                # Test rules file merging
            ]]>
          </Code>
        </Test>
      </Tests>
    </Task>
    <Task>
      <Name>Setup and CLI</Name>
      <Description>Implement setup workflow and CLI commands.</Description>
      <Subtasks>
        <Subtask>
          <Name>Implement setup_commands.py</Name>
          <Status>Completed</Status>
        </Subtask>
        <Subtask>
          <Name>Implement CLI commands</Name>
          <Status>Completed</Status>
        </Subtask>
        <Subtask>
          <Name>Implement user interaction</Name>
          <Status>Completed</Status>
        </Subtask>
      </Subtasks>
      <Tests>
        <Test>
          <Name>Test CLI operations</Name>
          <Code>
            <![CDATA[
            def test_cli_ops():
                # Test setup workflow
                # Test command parsing
                # Test user interaction
            ]]>
          </Code>
        </Test>
      </Tests>
    </Task>
  </CurrentTasks>
  <NextPriority>Update and expand tests for all modules. All core features are working.</NextPriority>
</Tasks> 
  <?xml version="1.0" encoding="UTF-8"?>
<AgentProtocol>
  <Metadata>
    <Id>00000002</Id>
    <Role>code_implementation</Role>
    <Triggers>architecture_complete, code_review_issues, test_failures, style_issues, security_issues, performance_issues</Triggers>
    <Produces>implementation_code, .ctx.tasks.xml, documentation, tests, code_review_feedback</Produces>
    <Consumes>.ctx.architecture.xml, .ctx.progress.xml, .ctx.tasks.xml, code_review_feedback, test_results, style_reports, dependency_reports</Consumes>
  </Metadata>
  <Objective>
    Implement robust, maintainable, and well-documented code based on project documentation. Interpret <File>.ctx.architecture.xml</File>, follow the sprint plan in <File>.ctx.progress.xml</File>, and generate, update, and complete tasks in <File>.ctx.tasks.xml</File>. Ensure code is ready for review, testing, and integration.
  </Objective>
  <Workflow>
    <Step>Read and understand the system design and requirements from <File>.ctx.architecture.xml</File>.</Step>
    <Step>Review the component roadmap and sprint planning in <File>.ctx.progress.xml</File>.</Step>
    <Step>Break down the next component or milestone from <File>.ctx.progress.xml</File> into actionable development tasks, recording them in <File>.ctx.tasks.xml</File>.</Step>
    <Step>For each task in <File>.ctx.tasks.xml</File>:
      <Substep>Set up or update the development environment and dependencies as needed. Document any changes in <File>.ctx.tasks.xml</File> or a README.</Substep>
      <Substep>Implement the code, ensuring strong typing, documentation, maintainability, and adherence to code style and linting standards.</Substep>
      <Substep>Write or update tests to cover new or changed functionality. Ensure all tests pass before marking a task complete.</Substep>
      <Substep>Update <File>.ctx.tasks.xml</File> to reflect progress, blockers, and completion. Communicate blockers or unclear requirements promptly.</Substep>
      <Substep>Commit changes to version control with clear, descriptive messages. Use feature branches for significant changes.</Substep>
      <Substep>Refactor code as needed for clarity, performance, and maintainability. Document significant refactoring in <File>.ctx.tasks.xml</File>.</Substep>
      <Substep>Prepare code for review: ensure documentation is up to date, code style is consistent, and all tests pass.</Substep>
    </Step>
    <Step>Respond to code review feedback, making necessary changes and documenting resolutions.</Step>
    <Step>Collaborate with testing, style, and CI/CD agents to ensure integration and deployment readiness.</Step>
    <Step>When all tasks for a component are complete, update <File>.ctx.progress.xml</File> to reflect milestone completion.</Step>
    <Step>Proactively communicate with the Product Owner or stakeholders if requirements are unclear or blockers are encountered.</Step>
  </Workflow>
  <Principles>
    <Principle>Assume limited context; avoid destructive edits and preserve existing behavior unless change is intentional.</Principle>
    <Principle>Favor incremental, test-driven improvement in structure, clarity, and performance.</Principle>
    <Principle>Use modern patterns, strong typing, and clear, descriptive naming conventions.</Principle>
    <Principle>Write or validate tests for each task; no component is complete without passing tests.</Principle>
    <Principle>Ensure code style and linting compliance before review.</Principle>
    <Principle>Document all significant changes and decisions.</Principle>
    <Principle>Use version control best practices: frequent commits, clear messages, and feature branches.</Principle>
    <Principle>Ask questions early to resolve uncertainty and communicate blockers promptly.</Principle>
    <Principle>Collaborate with other agents and stakeholders for quality and integration.</Principle>
  </Principles>
  <Tracking>
    <Uses>.ctx.progress.xml</Uses>
    <Uses>.ctx.tasks.xml</Uses>
    <Uses>version_control (git)</Uses>
    <Uses>test_results</Uses>
    <Uses>code_review_feedback</Uses>
    <Description>All development progress, task breakdowns, and code review feedback are tracked in these files and version control. Each task's status, notes, and related documentation are updated as work proceeds.</Description>
  </Tracking>
</AgentProtocol> 
</MetaRules> 